Terminals:
class def from import as len with open as none ( ) , * : if bool elif else print + - ^ / // ** = += -= % number variable int float str double is " ' format input True False and or not > < >= <= == != in
Variables:
CLASS DEF FROM IMPORT METHOD NONE PARAMETER IF BOOL ELIF ELSE PRINT PRINTVALUE VV RAISE STRING RANGE WHILE FOR BREAK CONTINUE VAL S OPS INPUT
Productions:
CLASS -> class STRING :;
DEF -> def STRING PARAMETER :;
FROM -> from STRING IMPORT;
IMPORT -> import STRING;
IMPORT -> import STRING as STRING;
METHOD -> len ( VAR );
METHOD -> STRING PARAMETER;
METHOD -> with open ( STRING , ' STRING ' ) as STRING;
NONE -> none;
PARAMETER -> ( );
PARAMETER -> ( VV ( , VV ) * );
IF -> if BOOL :;
ELIF -> elif BOOL :;
ELSE -> else :;
PRINT -> print ( PRINTVALUE ) | print ( ) | print ( " PRINTVALUE " );
PRINTVALUE -> VV ( , VV ) *;
PRINTVALUE -> string
RAISE -> raise STRING;
RANGE -> range ( VAL );
RANGE -> range ( VAL , VAL );
WHILE -> while BOOL:;
FOR -> for VAR in STRING :;
FOR -> for VAR in RANGE :;
BREAK -> break;
CONTINUE -> continue;
S -> variable = number | variable = variable OPS variable | variable = variable | variable += variable | variable -= variable | PRINT | """ STRING """ | # STRING | S S;
OPS -> + | - | * | / | // | ** | %;
STRING -> " variable " | " number " | ' variable ' | ' number ' | str ( number ) | STRING + STRING | STRING . format ( );
INPUT -> variable input ( );
VV -> variable | number | int ( INPUT ) | float ( INPUT ) | str ( INPUT ) | int ( variable ) | int ( S ) | float ( S ) | str ( S ) | double ( S ) | float ( variable ) | VV is VV | str ( variable );
BOOL -> False | True | BOOL and BOOL | BOOL or BOOL | not BOOL | VV != VV | VV > VV | VV >= VV | VV <= VV | VV == VV | ( BOOL ) | STRING in VV